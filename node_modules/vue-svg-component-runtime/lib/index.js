"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isElementNode = function (node) {
    return node.hasOwnProperty('tag');
};
function renderASTNode(h, ast) {
    if (exports.isElementNode(ast)) {
        var children = [];
        if (ast.children) {
            children = ast.children.map(function (child) { return renderASTNode(h, child); });
        }
        return h(ast.tag, {
            attrs: ast.attrsMap
        }, children);
    }
    else {
        return ast.text;
    }
}
exports.svgComponent = function (svg) {
    var component = {
        props: {
            scale: {
                type: [Number, Boolean],
                default: 1,
                required: false,
            },
            fill: {
                type: String,
                default: 'currentColor',
                required: false,
            }
        },
        inheritAttrs: false,
        computed: {
            dimension: function () {
                if (!this.scale || !svg.attrsMap || !svg.attrsMap.viewBox) {
                    return {};
                }
                var splits = svg.attrsMap.viewBox.split(" ");
                return {
                    width: Math.floor(parseInt(splits[2]) * this.scale),
                    height: Math.floor(parseInt(splits[3]) * this.scale),
                };
            }
        },
        render: function (h) {
            var scale = (this.scale ? this.dimension : {});
            var svgAttrs = __assign({}, svg.attrsMap, { 'aria-hidden': 'true', fill: this.fill }, scale, this.$attrs);
            return h(svg.tag, {
                attrs: svgAttrs,
                on: this.$listeners
            }, [
                this.$slots.default
            ].concat((svg.children || []).map(function (c) { return renderASTNode(h, c); })));
        },
    };
    return component;
};
