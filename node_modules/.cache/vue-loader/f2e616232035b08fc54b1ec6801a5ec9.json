{"remainingRequest":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/robot/modules/AddSkillRobot.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/robot/modules/AddSkillRobot.vue","mtime":1581472875037},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/thread-loader/dist/cjs.js","mtime":1571637441620},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js","mtime":1571637266900},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js","mtime":1571637450640}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { addData, queryData } from '@/api/common'\nimport { STable } from '@/components'\nexport default {\n  name: 'TableList',\n  components: {\n    STable\n  },\n  data () {\n    return {\n      // orgId: '',\n      robotCode: '',\n      robotId: '',\n      orgNames: [],\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 7 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 13 }\n      },\n      visible: false,\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      selectedRowKeys: new Set([]),\n      // 查询参数\n      queryParam: {\n        orgId: '',\n        name: ''\n      },\n      options: {\n        alert: {\n          show: true\n        },\n        rowSelection: {\n          onSelect: this.onSelectChange,\n          onSelectAll: this.onSelectChangeAll\n        }\n      },\n      optionAlertShow: false,\n      columns: [\n        {\n          title: '#',\n          dataIndex: 'no',\n          scopedSlots: { customRender: 'serial' }\n        },\n        {\n          title: '场景名称',\n          dataIndex: 'name',\n          scopedSlots: { customRender: 'name' }\n        },\n        {\n          title: '单位',\n          dataIndex: 'orgId',\n          scopedSlots: { customRender: 'orgId' }\n        },\n        {\n          title: '创建时间',\n          dataIndex: 'createDate',\n          scopedSlots: { customRender: 'createDate' }\n        },\n        {\n          title: '类型',\n          dataIndex: 'type',\n          scopedSlots: { customRender: 'type' }\n        }\n\n      ],\n      // 加载数据方法 必须为 Promise 对象\n      loadData: parameter => {\n        let orgId\n        if (this.queryParam.orgId > 0) {\n          orgId = this.queryParam.orgId\n        } else {\n          orgId = JSON.parse(localStorage.getItem('user')).orgId\n        }\n        return queryData(Object.assign(parameter, this.queryParam, { robotCode: this.robotCode, orgId: orgId }), '/skillsType/getRobotSkillsType').then(res => {\n          console.log(res)\n          return res.result\n        })\n      }\n    }\n  },\n  created () {\n    this.handleOrgLists()\n  },\n  methods: {\n    show (record) {\n      this.visible = true\n      // this.orgId = record.orgId\n      this.robotCode = record.code\n      this.robotId = record.id\n      this.selectedRowKeys.clear()\n    },\n    // 搜索内容\n    searchData () {\n      this.$refs.table.refresh(true)\n    },\n    // 获取该用户下的所属单位\n    handleOrgLists () {\n      var _this = this\n      var orgId = JSON.parse(localStorage.getItem('user')).orgId\n      var param = { org: orgId }\n      queryData(param, '/userManage/getHrOrgByPid')\n        .then(res => {\n          _this.orgNames = res.result\n          if (res.code !== 0) {\n            _this.$message.error(res.message)\n          }\n        })\n        .catch(err => console.log(err))\n    },\n    filterOption (input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    // 表单重置\n    resetQuery () {\n      this.queryParam = { orgId: '', name: '' }\n      this.$refs.table.refresh(true)\n    },\n    handleSubmit () {\n      const { form: { validateFields } } = this\n      this.confirmLoading = true\n      validateFields((errors, values) => {\n        if (!errors) {\n          const param = { robotCode: this.robotCode, robotId: this.robotId, skillType: [...this.selectedRowKeys] }\n          const _this = this\n          queryData(param, '/skillsRobot/save').then(res => {\n            console.log(res)\n            if (res.code == 0) {\n              _this.$message.success('配置成功')\n              _this.visible = false\n              _this.$emit('ok', values)\n            } else {\n              _this.$message.error(res.message)\n            }\n          })\n        }\n      })\n    },\n    tableOption () {\n      if (!this.optionAlertShow) {\n        this.options = {\n          alert: {\n            show: true,\n            clear: () => {\n              this.selectedRowKeys = []\n            }\n          },\n          rowSelection: {\n            selectedRowKeys: this.selectedRowKeys,\n            onChange: this.onSelectChange,\n            getCheckboxProps: record => ({\n              props: {\n                disabled: record.no === 'No 2', // Column configuration not to be checked\n                name: record.no\n              }\n            })\n          }\n        }\n        this.optionAlertShow = true\n      } else {\n        this.options = {\n          alert: false,\n          rowSelection: null\n        }\n        this.optionAlertShow = false\n      }\n    },\n\n    onSelectChange (record, selected, nativeEvent) {\n      console.log(record, selected)\n      if (selected) {\n        this.selectedRowKeys.add(record.id)\n      } else {\n        this.selectedRowKeys.delete(record.id)\n      }\n    },\n    onSelectChangeAll (selected, changeRows) {\n      if (selected) {\n        changeRows.map((value, index) => {\n          this.selectedRowKeys.add(value.id)\n        })\n      } else {\n        changeRows.map((value, index) => {\n          this.selectedRowKeys.delete(value.id)\n        })\n      }\n    }\n  }\n}\n",null]}