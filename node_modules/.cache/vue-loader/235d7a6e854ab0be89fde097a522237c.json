{"remainingRequest":"/Users/cyb/work/KaiFa/cz_workSpace/publicSecurityConvenient/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cyb/work/KaiFa/cz_workSpace/publicSecurityConvenient/src/components/MultiTab/MultiTab.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cyb/work/KaiFa/cz_workSpace/publicSecurityConvenient/src/components/MultiTab/MultiTab.vue","mtime":1571637124678},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/publicSecurityConvenient/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/publicSecurityConvenient/node_modules/babel-loader/lib/index.js","mtime":1571637266900},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/publicSecurityConvenient/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/publicSecurityConvenient/node_modules/vue-loader/lib/index.js","mtime":1571637450640}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'MultiTab',\r\n  data () {\r\n    return {\r\n      fullPathList: [],\r\n      pages: [],\r\n      activeKey: '',\r\n      newTabIndex: 0\r\n    }\r\n  },\r\n  created () {\r\n    this.pages.push(this.$route)\r\n    this.fullPathList.push(this.$route.fullPath)\r\n    this.selectedLastPath()\r\n  },\r\n  methods: {\r\n    onEdit (targetKey, action) {\r\n      this[action](targetKey)\r\n    },\r\n    remove (targetKey) {\r\n      this.pages = this.pages.filter(page => page.fullPath !== targetKey)\r\n      this.fullPathList = this.fullPathList.filter(path => path !== targetKey)\r\n      // 判断当前标签是否关闭，若关闭则跳转到最后一个还存在的标签页\r\n      if (!this.fullPathList.includes(this.activeKey)) {\r\n        this.selectedLastPath()\r\n      }\r\n    },\r\n    selectedLastPath () {\r\n      this.activeKey = this.fullPathList[this.fullPathList.length - 1]\r\n    },\r\n\r\n    // content menu\r\n    closeThat (e) {\r\n      this.remove(e)\r\n    },\r\n    closeLeft (e) {\r\n      const currentIndex = this.fullPathList.indexOf(e)\r\n      if (currentIndex > 0) {\r\n        this.fullPathList.forEach((item, index) => {\r\n          if (index < currentIndex) {\r\n            this.remove(item)\r\n          }\r\n        })\r\n      } else {\r\n        this.$message.info('左侧没有标签')\r\n      }\r\n    },\r\n    closeRight (e) {\r\n      const currentIndex = this.fullPathList.indexOf(e)\r\n      if (currentIndex < (this.fullPathList.length - 1)) {\r\n        this.fullPathList.forEach((item, index) => {\r\n          if (index > currentIndex) {\r\n            this.remove(item)\r\n          }\r\n        })\r\n      } else {\r\n        this.$message.info('右侧没有标签')\r\n      }\r\n    },\r\n    closeAll (e) {\r\n      const currentIndex = this.fullPathList.indexOf(e)\r\n      this.fullPathList.forEach((item, index) => {\r\n        if (index !== currentIndex) {\r\n          this.remove(item)\r\n        }\r\n      })\r\n    },\r\n    closeMenuClick ({ key, item, domEvent }) {\r\n      const vkey = domEvent.target.getAttribute('data-vkey')\r\n      switch (key) {\r\n        case 'close-right':\r\n          this.closeRight(vkey)\r\n          break\r\n        case 'close-left':\r\n          this.closeLeft(vkey)\r\n          break\r\n        case 'close-all':\r\n          this.closeAll(vkey)\r\n          break\r\n        default:\r\n        case 'close-that':\r\n          this.closeThat(vkey)\r\n          break\r\n      }\r\n    },\r\n    renderTabPaneMenu (e) {\r\n      return (\r\n        <a-menu {...{ on: { click: this.closeMenuClick } }}>\r\n          <a-menu-item key=\"close-that\" data-vkey={e}>关闭当前标签</a-menu-item>\r\n          <a-menu-item key=\"close-right\" data-vkey={e}>关闭右侧</a-menu-item>\r\n          <a-menu-item key=\"close-left\" data-vkey={e}>关闭左侧</a-menu-item>\r\n          <a-menu-item key=\"close-all\" data-vkey={e}>关闭全部</a-menu-item>\r\n        </a-menu>\r\n      )\r\n    },\r\n    // render\r\n    renderTabPane (title, keyPath) {\r\n      const menu = this.renderTabPaneMenu(keyPath)\r\n\r\n      return (\r\n        <a-dropdown overlay={menu} trigger={['contextmenu']}>\r\n          <span style={{ userSelect: 'none' }}>{ title }</span>\r\n        </a-dropdown>\r\n      )\r\n    }\r\n  },\r\n  watch: {\r\n    '$route': function (newVal) {\r\n      this.activeKey = newVal.fullPath\r\n      if (this.fullPathList.indexOf(newVal.fullPath) < 0) {\r\n        this.fullPathList.push(newVal.fullPath)\r\n        this.pages.push(newVal)\r\n      }\r\n    },\r\n    activeKey: function (newPathKey) {\r\n      this.$router.push({ path: newPathKey })\r\n    }\r\n  },\r\n  render () {\r\n    const { onEdit, $data: { pages } } = this\r\n    const panes = pages.map(page => {\r\n      return (\r\n        <a-tab-pane\r\n          style={{ height: 0 }}\r\n          tab={this.renderTabPane(page.meta.title, page.fullPath)}\r\n          key={page.fullPath} closable={pages.length > 1}\r\n        >\r\n        </a-tab-pane>)\r\n    })\r\n\r\n    return (\r\n      <div class=\"ant-pro-multi-tab\">\r\n        <div class=\"ant-pro-multi-tab-wrapper\">\r\n          <a-tabs\r\n            hideAdd\r\n            type={'editable-card'}\r\n            v-model={this.activeKey}\r\n            tabBarStyle={{ background: '#FFF', margin: 0, paddingLeft: '16px', paddingTop: '1px' }}\r\n            {...{ on: { edit: onEdit } }}>\r\n            {panes}\r\n          </a-tabs>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",{"version":3,"sources":["MultiTab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MultiTab.vue","sourceRoot":"src/components/MultiTab","sourcesContent":["<!--\r\n<template>\r\n  <div style=\"margin: -23px -24px 24px -24px\">\r\n    &lt;!&ndash;<a-dropdown :trigger=\"['contextmenu']\" overlayClassName=\"multi-tab-menu-wrapper\">\r\n      <a-menu slot=\"overlay\">\r\n        <a-menu-item key=\"1\">1st menu item</a-menu-item>\r\n        <a-menu-item key=\"2\">2nd menu item</a-menu-item>\r\n        <a-menu-item key=\"3\">3rd menu item</a-menu-item>\r\n      </a-menu>\r\n    </a-dropdown>&ndash;&gt;\r\n    <a-tabs\r\n      hideAdd\r\n      v-model=\"activeKey\"\r\n      type=\"editable-card\"\r\n      :tabBarStyle=\"{ background: '#FFF', margin: 0, paddingLeft: '16px', paddingTop: '1px' }\"\r\n      @edit=\"onEdit\"\r\n    >\r\n      <a-tab-pane v-for=\"page in pages\" :style=\"{ height: 0 }\" :tab=\"page.meta.title\" :key=\"page.fullPath\" :closable=\"pages.length > 1\">\r\n      </a-tab-pane>\r\n      <template slot=\"renderTabBar\" slot-scope=\"props, DefaultTabBar\">\r\n        <component :is=\"DefaultTabBar\" {...props} />\r\n      </template>\r\n    </a-tabs>\r\n  </div>\r\n</template>\r\n-->\r\n\r\n<script>\r\nexport default {\r\n  name: 'MultiTab',\r\n  data () {\r\n    return {\r\n      fullPathList: [],\r\n      pages: [],\r\n      activeKey: '',\r\n      newTabIndex: 0\r\n    }\r\n  },\r\n  created () {\r\n    this.pages.push(this.$route)\r\n    this.fullPathList.push(this.$route.fullPath)\r\n    this.selectedLastPath()\r\n  },\r\n  methods: {\r\n    onEdit (targetKey, action) {\r\n      this[action](targetKey)\r\n    },\r\n    remove (targetKey) {\r\n      this.pages = this.pages.filter(page => page.fullPath !== targetKey)\r\n      this.fullPathList = this.fullPathList.filter(path => path !== targetKey)\r\n      // 判断当前标签是否关闭，若关闭则跳转到最后一个还存在的标签页\r\n      if (!this.fullPathList.includes(this.activeKey)) {\r\n        this.selectedLastPath()\r\n      }\r\n    },\r\n    selectedLastPath () {\r\n      this.activeKey = this.fullPathList[this.fullPathList.length - 1]\r\n    },\r\n\r\n    // content menu\r\n    closeThat (e) {\r\n      this.remove(e)\r\n    },\r\n    closeLeft (e) {\r\n      const currentIndex = this.fullPathList.indexOf(e)\r\n      if (currentIndex > 0) {\r\n        this.fullPathList.forEach((item, index) => {\r\n          if (index < currentIndex) {\r\n            this.remove(item)\r\n          }\r\n        })\r\n      } else {\r\n        this.$message.info('左侧没有标签')\r\n      }\r\n    },\r\n    closeRight (e) {\r\n      const currentIndex = this.fullPathList.indexOf(e)\r\n      if (currentIndex < (this.fullPathList.length - 1)) {\r\n        this.fullPathList.forEach((item, index) => {\r\n          if (index > currentIndex) {\r\n            this.remove(item)\r\n          }\r\n        })\r\n      } else {\r\n        this.$message.info('右侧没有标签')\r\n      }\r\n    },\r\n    closeAll (e) {\r\n      const currentIndex = this.fullPathList.indexOf(e)\r\n      this.fullPathList.forEach((item, index) => {\r\n        if (index !== currentIndex) {\r\n          this.remove(item)\r\n        }\r\n      })\r\n    },\r\n    closeMenuClick ({ key, item, domEvent }) {\r\n      const vkey = domEvent.target.getAttribute('data-vkey')\r\n      switch (key) {\r\n        case 'close-right':\r\n          this.closeRight(vkey)\r\n          break\r\n        case 'close-left':\r\n          this.closeLeft(vkey)\r\n          break\r\n        case 'close-all':\r\n          this.closeAll(vkey)\r\n          break\r\n        default:\r\n        case 'close-that':\r\n          this.closeThat(vkey)\r\n          break\r\n      }\r\n    },\r\n    renderTabPaneMenu (e) {\r\n      return (\r\n        <a-menu {...{ on: { click: this.closeMenuClick } }}>\r\n          <a-menu-item key=\"close-that\" data-vkey={e}>关闭当前标签</a-menu-item>\r\n          <a-menu-item key=\"close-right\" data-vkey={e}>关闭右侧</a-menu-item>\r\n          <a-menu-item key=\"close-left\" data-vkey={e}>关闭左侧</a-menu-item>\r\n          <a-menu-item key=\"close-all\" data-vkey={e}>关闭全部</a-menu-item>\r\n        </a-menu>\r\n      )\r\n    },\r\n    // render\r\n    renderTabPane (title, keyPath) {\r\n      const menu = this.renderTabPaneMenu(keyPath)\r\n\r\n      return (\r\n        <a-dropdown overlay={menu} trigger={['contextmenu']}>\r\n          <span style={{ userSelect: 'none' }}>{ title }</span>\r\n        </a-dropdown>\r\n      )\r\n    }\r\n  },\r\n  watch: {\r\n    '$route': function (newVal) {\r\n      this.activeKey = newVal.fullPath\r\n      if (this.fullPathList.indexOf(newVal.fullPath) < 0) {\r\n        this.fullPathList.push(newVal.fullPath)\r\n        this.pages.push(newVal)\r\n      }\r\n    },\r\n    activeKey: function (newPathKey) {\r\n      this.$router.push({ path: newPathKey })\r\n    }\r\n  },\r\n  render () {\r\n    const { onEdit, $data: { pages } } = this\r\n    const panes = pages.map(page => {\r\n      return (\r\n        <a-tab-pane\r\n          style={{ height: 0 }}\r\n          tab={this.renderTabPane(page.meta.title, page.fullPath)}\r\n          key={page.fullPath} closable={pages.length > 1}\r\n        >\r\n        </a-tab-pane>)\r\n    })\r\n\r\n    return (\r\n      <div class=\"ant-pro-multi-tab\">\r\n        <div class=\"ant-pro-multi-tab-wrapper\">\r\n          <a-tabs\r\n            hideAdd\r\n            type={'editable-card'}\r\n            v-model={this.activeKey}\r\n            tabBarStyle={{ background: '#FFF', margin: 0, paddingLeft: '16px', paddingTop: '1px' }}\r\n            {...{ on: { edit: onEdit } }}>\r\n            {panes}\r\n          </a-tabs>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n</script>\r\n"]}]}