{"remainingRequest":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\XiangMu\\ant-design-pro-vue\\src\\views\\face\\modules\\RobotCmd.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\XiangMu\\ant-design-pro-vue\\src\\views\\face\\modules\\RobotCmd.vue","mtime":1566626553370},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { addData, queryData } from '@/api/common'\r\nimport CmdList from '../../Cmd'\r\nimport { STable } from '@/components'\r\nexport default {\r\n  name: 'TableList',\r\n  components: {\r\n    STable,\r\n    CmdList\r\n  },\r\n  data() {\r\n    return {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 7 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 13 }\r\n      },\r\n      visible: false,\r\n      confirmLoading: false,\r\n      cmdList:[],\r\n      mapId:'',\r\n      mapList:[],\r\n      cmd:'',\r\n      faceId:'',\r\n      faceName:'',\r\n      form: this.$form.createForm(this),\r\n      selectedItems: [],\r\n      selectedRowKeys: [],\r\n      selectedRows: [],\r\n      options: {\r\n        alert: {\r\n          show: true,\r\n          clear: () => {\r\n            this.selectedRowKeys = []\r\n          }\r\n        },\r\n        rowSelection: {\r\n          selectedRowKeys: this.selectedRowKeys,\r\n          onChange: this.onSelectChange\r\n        }\r\n      },\r\n      optionAlertShow: false,\r\n      columns: [\r\n        {\r\n          title: '#',\r\n          dataIndex: 'no',\r\n          scopedSlots: { customRender: 'serial' }\r\n        },\r\n\r\n        {\r\n          title: '名称',\r\n          dataIndex: 'name',\r\n          scopedSlots: { customRender: 'name' }\r\n        },\r\n        {\r\n          title: '编码',\r\n          dataIndex: 'code',\r\n          scopedSlots: { customRender: 'code' }\r\n        }\r\n        \r\n      ],\r\n      // 加载数据方法 必须为 Promise 对象\r\n      loadData: parameter => {\r\n        let org = JSON.parse(localStorage.getItem('user')).orgId;\r\n        return queryData(Object.assign(parameter, {orgId:org}), '/robotInfo/loadRobotListByOrg').then(res => {\r\n          console.log(res)\r\n          return res.result\r\n        })\r\n      }\r\n    }\r\n  },\r\n  created(){\r\n    this.getCmd()\r\n    this.getMap()\r\n  },\r\n  methods: {\r\n    show(record) {\r\n      this.faceId = record.id\r\n      this.faceName = record.name;\r\n      this.visible = true\r\n    },\r\n    getCmdId(cmdId){\r\n        this.cmd = cmdId;\r\n    },\r\n    showCmd(){\r\n      let formData = this.form.getFieldsValue();\r\n      let mapId = formData.mapId == undefined ? 0 : formData.mapId\r\n      this.$refs.cmd.show(this.faceName,mapId)\r\n    },\r\n    getMap(){\r\n      let org = JSON.parse(localStorage.getItem('user')).orgId;\r\n      queryData({orgId:org},'/robotMapLib/getRobotMapLibList').then(res => {\r\n        console.log('-----------getMap',res);\r\n        this.mapList = res.result;\r\n      })\r\n    },\r\n    getCmd(){\r\n      let org = JSON.parse(localStorage.getItem('user')).orgId;\r\n      let _this = this;\r\n      queryData({orgId:org},'/cmdCollection/getCmdListByOrg').then(res => {\r\n        console.log(res)\r\n        if(res.code == 0){\r\n          _this.cmdList = res.cmdList\r\n        } else {\r\n          _this.$message.error(res.message)\r\n        }\r\n      });\r\n    },\r\n    handleSubmit() {\r\n      const { form: { validateFields } } = this\r\n      this.confirmLoading = true\r\n      validateFields((errors, values) => {\r\n        if (!errors) {\r\n          console.log(values.cmd);\r\n          console.log( this.selectedRowKeys  );\r\n          let param = {faceId:this.faceId,cmd:values.cmd,robotCode:this.selectedRowKeys}\r\n          let _this = this;\r\n          queryData(param,'/faceManage/addRobotFace').then(res => {\r\n            console.log(res)\r\n            if(res.code == 0){\r\n              _this.$message.success('配置成功')\r\n              _this.visible = false;\r\n              _this.$emit('ok', values)\r\n            } else {\r\n              _this.$message.error(res.message)\r\n            }\r\n          });\r\n\r\n          } \r\n      });\r\n      \r\n    },\r\n    tableOption() {\r\n      if (!this.optionAlertShow) {\r\n        this.options = {\r\n          alert: {\r\n            show: true,\r\n            clear: () => {\r\n              this.selectedRowKeys = []\r\n            }\r\n          },\r\n          rowSelection: {\r\n            selectedRowKeys: this.selectedRowKeys,\r\n            onChange: this.onSelectChange,\r\n            getCheckboxProps: record => ({\r\n              props: {\r\n                disabled: record.no === 'No 2', // Column configuration not to be checked\r\n                name: record.no\r\n              }\r\n            })\r\n          }\r\n        }\r\n        this.optionAlertShow = true\r\n      } else {\r\n        this.options = {\r\n          alert: false,\r\n          rowSelection: null\r\n        }\r\n        this.optionAlertShow = false\r\n      }\r\n    },\r\n\r\n    onSelectChange(selectedRowKeys, selectedRows) {\r\n      this.selectedRowKeys = selectedRowKeys\r\n      this.selectedRows = selectedRows\r\n    },\r\n  }\r\n}\r\n",null]}