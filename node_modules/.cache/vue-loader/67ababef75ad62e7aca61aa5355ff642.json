{"remainingRequest":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\XiangMu\\ant-design-pro-vue\\src\\views\\company\\ComList.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\XiangMu\\ant-design-pro-vue\\src\\views\\company\\ComList.vue","mtime":1565769941375},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { queryData } from '@/api/common'\r\nimport DetailList from '@/components/tools/DetailList'\r\nconst DetailListItem = DetailList.Item\r\nexport default {\r\n  components: {\r\n    DetailList,\r\n    DetailListItem,\r\n  },\r\n  data() {\r\n    return {\r\n      form: this.$form.createForm(this),\r\n      expandedKeys: [],\r\n      searchValue: '',\r\n      autoExpandParent: true,\r\n      orgTree: [],\r\n      orgList: [],\r\n      comInfo:[],\r\n      pid:'',\r\n      isSelect:false,\r\n      addVisible:false,\r\n      editVisible:false,\r\n      addForm:{\r\n        name:'',\r\n        contact:'',\r\n        contactWay:'',\r\n        descn:''\r\n      },\r\n      editForm:{\r\n      },\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 7 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 13 }\r\n      },\r\n    }\r\n  },\r\n  beforeMount() {\r\n    this.getDateTree();\r\n  },\r\n  methods: {\r\n    // 新增\r\n    handleAdd(){\r\n      const { form: { validateFields } } = this;\r\n      var _this = this;\r\n      validateFields((errors, values) => {\r\n        if (!errors) {\r\n          console.log('values', values)\r\n        }\r\n        var param = {pid:this.pid,...values.addForm};\r\n        console.log(param);\r\n        \r\n        queryData(param,'/hrOrg/save').then(res => {\r\n           if(res.code == 0){\r\n             _this.$message.success('新建成功');\r\n             _this.addVisible = false;\r\n             _this.form.resetFields();\r\n             _this.getDateTree();\r\n           } else {\r\n              _this.$message.error(res.message);\r\n           }\r\n        });\r\n        \r\n      });\r\n    },\r\n    // 编辑\r\n    handleEdit(){\r\n      const { form: { validateFields } } = this;\r\n      var _this = this;\r\n      validateFields((errors, values) => {\r\n        if (!errors) {\r\n          console.log('values', values)\r\n        }\r\n        var param = {entityId:this.pid,...values.editForm};\r\n        console.log(param);\r\n        \r\n        queryData(param,'/hrOrg/save').then(res => {\r\n           if(res.code == 0){\r\n             _this.$message.success('编辑成功');\r\n             _this.editVisible = false;\r\n             _this.form.resetFields();\r\n             _this.getDateTree();\r\n             _this.getComInfo(_this.pid);\r\n           } else {\r\n              _this.$message.error(res.message);\r\n           }\r\n        });\r\n        \r\n      });\r\n    },\r\n    // 删除\r\n    handleDelete(){\r\n      var _this = this;\r\n      this.$confirm({\r\n        title: '警告',\r\n        content: `真的要删除该单位吗?`,\r\n        okText: '删除',\r\n        okType: 'danger',\r\n        cancelText: '取消',\r\n        onOk () {\r\n          // 在这里调用删除接口\r\n          return new Promise((resolve, reject) => {\r\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\r\n            var param = {entityId:_this.pid};\r\n            console.log(param);\r\n            queryData(param,'/hrOrg/delete').then(res => {\r\n              console.log(res)\r\n              if(res.code == 0){\r\n                _this.$message.success('删除成功');\r\n                _this.getDateTree();\r\n              } else {\r\n                _this.$message.error(res.message)\r\n              }\r\n            });\r\n          }).catch(() => console.log('Oops errors!'))\r\n        },\r\n        onCancel () {\r\n          console.log('Cancel')\r\n        }\r\n      })\r\n    },\r\n    // 处理显隐\r\n    handleAddVisible(){\r\n      if(this.pid != '' ) {\r\n        this.addVisible = true;\r\n      }\r\n    },\r\n    // 编辑\r\n    handleEditVisible(){\r\n      this.editVisible = true;\r\n      this.editForm = this.comInfo;\r\n    },\r\n    //   获取树形结构数据\r\n    getDateTree() {\r\n      var id = JSON.parse(localStorage.getItem('user')).id;\r\n      var _this = this\r\n      queryData({ userid: id },'hrOrg/list').then(res => {\r\n        console.log(res);\r\n        if(res.code == 0){\r\n          _this.orgTree = res.result\r\n          _this.getOrgList(res.result);     \r\n          var expandedKeys=[];\r\n           res.result.map((value,index)=>{\r\n             if(value.children){\r\n               var item=value.children;\r\n               item.map((value,index)=>{\r\n                  expandedKeys.push(value.key);\r\n               })\r\n             }else{\r\n                expandedKeys.push(value.key);\r\n             }             \r\n           })\r\n           _this.expandedKeys =expandedKeys;\r\n      \r\n        }\r\n      })\r\n    },\r\n    //   获取用于搜索的list数组\r\n    getOrgList(data) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        const node = data[i]\r\n        const key = node.key;\r\n        const title = node.title;\r\n        const orgid = node.orgId;\r\n        const pid = node.pid;\r\n        this.orgList.push({ key, title: title, orgid : orgid, pid : pid })\r\n        if (node.children) {\r\n          this.getOrgList(node.children)\r\n        }\r\n      }\r\n    },\r\n    // 获取当前点击单位\r\n    onSelect(key){\r\n      this.getComInfo(key[0]);\r\n     \r\n    },\r\n    getComInfo(pid){\r\n      var param = {orgId:pid}; \r\n      var _this = this;\r\n      queryData(param,'/hrOrg/getOrgMessage').then(res => {\r\n        console.log(res);\r\n        if(res.code == 0){\r\n          _this.comInfo  = Object(res.hrOrg);\r\n          if(Object.keys(_this.comInfo).length){\r\n            _this.isSelect = true;\r\n            _this.pid = pid;\r\n          } else {\r\n            _this.isSelect = false;\r\n          }\r\n        } \r\n      });\r\n    },\r\n    onExpand(expandedKeys) {\r\n      //console.log(expandedKeys);\r\n      this.expandedKeys = expandedKeys\r\n      this.autoExpandParent = false\r\n    },\r\n    // 搜索\r\n    onChange(e) {\r\n      const value = e.target.value\r\n\r\n      const expandedKeys = this.orgList\r\n        .map(item => {\r\n          if (item.title.indexOf(value) > -1) {\r\n            return this.getParentKey(item.title, this.orgTree)\r\n          }\r\n          return null\r\n        })\r\n        .filter((item, i, self) => item && self.indexOf(item) === i)\r\n      Object.assign(this, {\r\n        expandedKeys,\r\n        searchValue: value,\r\n        autoExpandParent: true\r\n      })\r\n    },\r\n    // 定位树形结构的数据\r\n    getParentKey(title, tree) {\r\n      let parentKey = 0\r\n      for (let i = 0; i < tree.length; i++) {\r\n        const node = tree[i]\r\n        if (node.children) {\r\n          if (node.children.some(item => item.title === title)) {\r\n            parentKey = node.key\r\n          } else if (this.getParentKey(title, node.children)) {\r\n            parentKey = this.getParentKey(title, node.children)\r\n          }\r\n        }\r\n      }\r\n      return parentKey\r\n    }\r\n  }\r\n}\r\n",null]}