{"remainingRequest":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/system/TimedTask.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/system/TimedTask.vue","mtime":1585105607243},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/thread-loader/dist/cjs.js","mtime":1571637441620},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js","mtime":1571637266900},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js","mtime":1571637450640}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { STable, Ellipsis } from '@/components'\nimport { PageView } from '@/layouts'\nimport EditForm from './modules/EditTimedTask'\nimport CreateForm from './modules/AddTimedTask'\nimport { queryData } from '@/api/common'\nimport { uploadUrl } from '@/api/upload'\nexport default {\n  name: 'TableList',\n  components: {\n    Ellipsis,\n    STable,\n    PageView,\n    EditForm,\n    CreateForm\n  },\n  data () {\n    return {\n      headers: {\n        authorization: 'authorization-text'\n      },\n      url: uploadUrl,\n      // 查询参数\n      queryParam: {\n        name: '',\n        navigateType: '',\n        androidType: ''\n      },\n      editData: {},\n      options: {\n        alert: false,\n        rowSelection: null\n      },\n      // 表头\n      columns: [\n        {\n          title: '#',\n          dataIndex: 'no',\n          scopedSlots: { customRender: 'serial' }\n        },\n        {\n          title: '机器人编码',\n          dataIndex: 'robotCode'\n        },\n        {\n          title: '定时任务描述',\n          dataIndex: 'taskDesc'\n        },\n        {\n          title: '执行命令集',\n          dataIndex: 'cmdName'\n        },\n        {\n          title: '备注',\n          dataIndex: 'remark',\n          scopedSlots: { customRender: 'remark' }\n        },\n        {\n          title: '创建时间',\n          dataIndex: 'createDate'\n        },\n        {\n          title: '更新时间',\n          dataIndex: 'updateDate'\n        },\n        {\n          title: '单位',\n          dataIndex: 'orgName'\n        },\n        {\n          title: '操作',\n          dataIndex: 'action',\n          scopedSlots: { customRender: 'action' }\n        }\n      ],\n      // 加载数据方法 必须为 Promise 对象\n      loadData: parameter => {\n        console.log('App 请求', parameter)\n        return queryData(Object.assign(parameter, this.queryParam), '/timedTask/queryTaskMsg')\n          .then(res => {\n            console.log(res)\n            return res.result\n          })\n      }\n    }\n  },\n  computed: {\n    title () {\n      return this.$route.meta.title\n    }\n  },\n  methods: {\n    // 下拉框\n    filterOption (input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    // 处理更新\n    handleRefresh () {\n      this.$refs.table.refresh()\n    },\n    // 表单重置\n    resetQuery () {\n      this.queryParam = {}\n      this.$refs.table.refresh(true)\n    },\n    handleEditVisible (record) {\n      this.$refs.editModal.edit(record)\n    },\n    // 搜索内容\n    searchData () {\n      this.$refs.table.refresh(true)\n    },\n    // 删除\n    handleDeleteUser (record) {\n      var _this = this\n      this.$confirm({\n        title: '警告',\n        content: `真的要删除定时任务吗?`,\n        okText: '删除',\n        okType: 'danger',\n        cancelText: '取消',\n        onOk () {\n          console.log('OK')\n          // 在这里调用删除接口\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            var param = { id: record.id, robotCode: record.robotCode }\n            queryData(param, '/timedTask/delTaskMsg').then(res => {\n              console.log('删除返回值：', res)\n              if (res.code == 0) {\n                _this.$message.success('删除成功')\n                _this.$refs.table.refresh()\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel () {\n          console.log('Cancel')\n        }\n      })\n    }\n  }\n\n}\n",null]}