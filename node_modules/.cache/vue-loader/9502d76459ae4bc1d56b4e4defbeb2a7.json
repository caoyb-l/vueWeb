{"remainingRequest":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/ques/SkillsType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/ques/SkillsType.vue","mtime":1583559735827},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js","mtime":1571637266900},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js","mtime":1571637450640}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { STable, Ellipsis } from '@/components'\nimport UpdateExcel from './modules/UpdateExcel'\nimport EditChat from './modules/EditChat'\nimport { queryData } from '@/api/common'\nexport default {\n  components: {\n    Ellipsis,\n    STable,\n    UpdateExcel,\n    EditChat\n  },\n  watch: {\n    'queryParam.skillsId'(values) {\n      this.$refs.table.refresh(true), console.log(values)\n    }\n  },\n  data() {\n    return {\n      selectedItems: [],\n      // Êü•ËØ¢ÂèÇÊï∞\n      queryParam: {\n        skillsId: '',\n        keywords: ''\n      },\n      editData: {},\n      // Ë°®Â§¥\n      columns: [\n        {\n          title: '#',\n          dataIndex: 'no',\n          scopedSlots: { customRender: 'serial' }\n        },\n        {\n          title: 'ÂÖ≥ÈîÆËØç',\n          dataIndex: 'keywords'\n        },\n        {\n          title: 'ÂõûÁ≠îÂÜÖÂÆπ',\n          dataIndex: 'contents',\n          scopedSlots: { customRender: 'contents' }\n        },\n        {\n          title: 'ÁΩëÈ°µÊàñÂõæÁâá',\n          dataIndex: 'url'\n        },\n        {\n          title: 'Âä®‰ΩúÈõÜ',\n          dataIndex: 'cmdName'\n        },\n        {\n          title: 'Êìç‰Ωú',\n          dataIndex: 'action',\n          scopedSlots: { customRender: 'action' }\n        }\n      ],\n      // Âä†ËΩΩÊï∞ÊçÆÊñπÊ≥ï ÂøÖÈ°ª‰∏∫ Promise ÂØπË±°\n      loadData: parameter => {\n        return queryData(Object.assign(parameter, this.queryParam), '/skills/getSkillsList3').then(res => {\n          console.log(res)\n          this.skills = res.result.data\n          return res.result\n        })\n      },\n      roleNames: [],\n      selectedRowKeys: [],\n      options: {\n        alert: false,\n        rowSelection: null\n      },\n      optionAlertShow: false,\n      treeData: [] //Ê†ëÁªìÊûÑ\n    }\n  },\n  created() {\n    this.handleSkillsTypeList()\n  },\n  methods: {\n    // Ëé∑ÂèñÂçï‰Ωç‰∏ãÁöÑÂçï‰Ωç\n    handleSkillsTypeList() {\n      const orgId = JSON.parse(localStorage.getItem('user')).orgId\n      var _this = this\n      queryData({ orgId: orgId }, '/skillsType/getSkillsTypeList').then(res => {\n        console.log(res)\n        _this.treeData = res.data\n        if (!res.code === 0) {\n          _this.$message.error(res.message)\n        }\n      })\n    },\n    // Â§ÑÁêÜÊñ∞Â¢û\n    handleAddSubmit() {\n      this.$refs.table.refresh(true)\n    },\n    // Ë°®ÂçïÈáçÁΩÆ\n    resetQuery() {\n      this.queryParam = {}\n      this.$refs.table.refresh(true)\n    },\n    // ÊòæÁ§∫Áä∂ÊÄÅ‰øÆÊîπ\n    handleAddVisible() {\n      this.addVisible = true\n    },\n    //‰øÆÊîπÈó≤ËÅä\n    handleEditVisible(record) {\n      this.editData = record\n      // this.$refs.editModal.add(record)\n      this.$refs.EditChat.add(record)\n    },\n    //‰∏ãÊãâÊ°Ü\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    // ÊêúÁ¥¢ÂÜÖÂÆπ\n    searchData() {\n      this.$refs.table.refresh(true)\n    },\n    // Âà†Èô§\n    deleteSkills(record) {\n      var _this = this\n      this.$confirm({\n        title: 'Ë≠¶Âëä',\n        content: `ÁúüÁöÑË¶ÅÂà†Èô§ ${record.title} Âêó?`,\n        okText: 'Âà†Èô§',\n        okType: 'danger',\n        cancelText: 'ÂèñÊ∂à',\n        onOk() {\n          console.log('OK')\n          // Âú®ËøôÈáåË∞ÉÁî®Âà†Èô§Êé•Âè£\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            var id = { entityIds: [record.id] }\n            queryData(id, '/skills/delete').then(res => {\n              console.log('Âà†Èô§Áî®Êà∑ËøîÂõûÂÄºÔºö', res)\n              if (res.code == 0) {\n                _this.$message.success('Âà†Èô§ÊàêÂäü')\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    // ÊâπÈáèÂà†Èô§\n    deleteSkillsIds() {\n      console.log(this.selectedRowKeys)\n      var _this = this\n      this.$confirm({\n        title: 'Ë≠¶Âëä',\n        content: `ÁúüÁöÑË¶ÅÂà†Èô§Âêó?`,\n        okText: 'Âà†Èô§',\n        okType: 'danger',\n        cancelText: 'ÂèñÊ∂à',\n        onOk() {\n          // Âú®ËøôÈáåË∞ÉÁî®Âà†Èô§Êé•Âè£\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            var entityIds = { entityIds: [_this.selectedRowKeys][0] }\n\n            queryData(entityIds, '/skillsOption/delete').then(res => {\n              if (res.code == 0) {\n                _this.$message.success('Âà†Èô§ÊàêÂäü')\n                _this.selectedRowKeys = []\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    //Ê∏ÖÁ©∫Âä®‰ΩúÈõÜ\n    delCmd(record) {\n      var _this = this\n      this.$confirm({\n        title: 'Ë≠¶Âëä',\n        content: ` <${record.title}> Â∞Ü‰∏çÂÜç‰ΩøÁî® <${record.cmdName}> Âä®‰ΩúÈõÜ`,\n        okText: 'Âà†Èô§',\n        okType: 'danger',\n        cancelText: 'ÂèñÊ∂à',\n        onOk() {\n          console.log('OK')\n          // Âú®ËøôÈáåË∞ÉÁî®Âà†Èô§Êé•Âè£\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            queryData({ entityId: record.skillsOptionId }, '/skillsOption/deleteCmd').then(res => {\n              console.log('Âà†Èô§Áî®Êà∑ËøîÂõûÂÄºÔºö', res)\n              if (res.code == 0) {\n                _this.$message.success('Âà†Èô§ÊàêÂäü')\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    tableOption() {\n      if (!this.optionAlertShow) {\n        this.options = {\n          alert: {\n            show: true,\n            clear: () => {\n              this.selectedRowKeys = []\n            }\n          },\n          rowSelection: {\n            selectedRowKeys: this.selectedRowKeys,\n            onChange: this.onSelectChange,\n            getCheckboxProps: record => ({\n              props: {\n                disabled: record.no === 'No 2',\n                name: record.no\n              }\n            })\n          }\n        }\n        this.optionAlertShow = true\n      } else {\n        this.options = {\n          alert: false,\n          rowSelection: null\n        }\n        this.optionAlertShow = false\n      }\n    },\n\n    onSelectChange(selectedRowKeys) {\n      this.selectedRowKeys = selectedRowKeys\n    },\n    deriveExcel() {\n      this.$message.success('Âà´ÁùÄÊÄ•Âø´Â•Ω‰∫Üüò≠')\n    }\n  }\n}\n",{"version":3,"sources":["SkillsType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SkillsType.vue","sourceRoot":"src/views/ques","sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n    <div class=\"table-page-search-wrapper\">\n      <a-form layout=\"inline\">\n        <a-row :gutter=\"48\">\n          <a-col :md=\"8\" :sm=\"24\">\n            <a-form-item label=\"Âú∫ÊôØÊ†ë\">\n              <a-tree-select\n                searchPlaceholder=\"Â∞ùËØïËæìÂÖ•ÂÜÖÂÆπÊêúÁ¥¢\"\n                style=\"width: 300px\"\n                :dropdownStyle=\"{ maxHeight:'900px', overflow: 'auto' }\"\n                :treeData=\"treeData\"\n                allowClear\n                placeholder=\"ÈÄâÊã©Âú∫ÊôØÔºåÁÇπÂáªÊü•ËØ¢\"\n                v-model=\"queryParam.skillsId\"\n              ></a-tree-select>\n            </a-form-item>\n          </a-col>\n          <a-col :md=\"5\" :sm=\"24\">\n            <a-form-item label=\"ÂÖ≥ÈîÆËØç\">\n              <a-input v-model=\"queryParam.keywords\" />\n            </a-form-item>\n          </a-col>\n          <a-col :md=\"8\" :sm=\"24\">\n            <a-button type=\"primary\" @click=\"searchData()\">Êü•ËØ¢</a-button>\n            <a-button style=\"margin-left: 10px\" @click=\"resetQuery()\">ÈáçÁΩÆ</a-button>\n            <a-button\n              type=\"dashed\"\n              style=\"margin-left: 10px\"\n              @click=\"tableOption\"\n            >{{ optionAlertShow && 'ÂÖ≥Èó≠' || 'ÂºÄÂêØ' }} ÊâπÈáè</a-button>\n            <a-dropdown v-if=\"selectedRowKeys.length > 0\">\n              <a-menu slot=\"overlay\">\n                <a-menu-item key=\"1\" @click=\"deleteSkillsIds()\" v-action:delete>\n                  <a-icon type=\"delete\" />Âà†Èô§\n                </a-menu-item>\n                <a-menu-item key=\"2\" @click=\"deriveExcel()\" v-action:delete>\n                  <a-icon type=\"share-alt\" />ÂØºÂá∫\n                </a-menu-item>\n              </a-menu>\n              <a-button style=\"margin-left: 8px\">\n                ÊâπÈáèÊìç‰Ωú\n                <a-icon type=\"down\" />\n              </a-button>\n            </a-dropdown>\n          </a-col>\n        </a-row>\n      </a-form>\n    </div>\n    <s-table\n      ref=\"table\"\n      size=\"middle\"\n      rowKey=\"id\"\n      :columns=\"columns\"\n      :data=\"loadData\"\n      :alert=\"options.alert\"\n      :rowSelection=\"options.rowSelection\"\n      showPagination=\"auto\"\n    >\n      <!-- Ë°®ÂçïÊñáÂ≠óËøáÈïøÔºåÁúÅÁï•Â±ïÁ§∫ÊñáÂ≠óÂÜÖÂÆπ -->\n      <span slot=\"contents\" slot-scope=\"text\">\n         <ellipsis :length=\"10\" tooltip>{{ text }}</ellipsis>\n      </span>\n      <span slot=\"serial\" slot-scope=\"text, record, index\">{{ index + 1 }}</span>\n      <span slot=\"action\" slot-scope=\"text, record\">\n        <template>\n          <a @click=\"handleEditVisible(record)\" v-action:edit>\n            ÁºñËæë\n            <a-icon type=\"edit\" />\n          </a>\n          <a-divider type=\"vertical\" />\n          <a @click=\"delCmd(record)\" v-action:delete>Ê∏ÖÁ©∫Âä®‰ΩúÈõÜ</a>\n          <a-divider type=\"vertical\" />\n          <a @click=\"deleteSkills(record)\" v-action:delete>\n            Âà†Èô§\n            <a-icon type=\"delete\" />\n          </a>\n        </template>\n      </span>\n    </s-table>\n    <update-excel ref=\"updateModal\" @ok=\"handleAddSubmit\"></update-excel>\n    <edit-chat ref=\"EditChat\" @ok=\"handleAddSubmit\" />\n  </a-card>\n</template>\n\n<script>\nimport { STable, Ellipsis } from '@/components'\nimport UpdateExcel from './modules/UpdateExcel'\nimport EditChat from './modules/EditChat'\nimport { queryData } from '@/api/common'\nexport default {\n  components: {\n    Ellipsis,\n    STable,\n    UpdateExcel,\n    EditChat\n  },\n  watch: {\n    'queryParam.skillsId'(values) {\n      this.$refs.table.refresh(true), console.log(values)\n    }\n  },\n  data() {\n    return {\n      selectedItems: [],\n      // Êü•ËØ¢ÂèÇÊï∞\n      queryParam: {\n        skillsId: '',\n        keywords: ''\n      },\n      editData: {},\n      // Ë°®Â§¥\n      columns: [\n        {\n          title: '#',\n          dataIndex: 'no',\n          scopedSlots: { customRender: 'serial' }\n        },\n        {\n          title: 'ÂÖ≥ÈîÆËØç',\n          dataIndex: 'keywords'\n        },\n        {\n          title: 'ÂõûÁ≠îÂÜÖÂÆπ',\n          dataIndex: 'contents',\n          scopedSlots: { customRender: 'contents' }\n        },\n        {\n          title: 'ÁΩëÈ°µÊàñÂõæÁâá',\n          dataIndex: 'url'\n        },\n        {\n          title: 'Âä®‰ΩúÈõÜ',\n          dataIndex: 'cmdName'\n        },\n        {\n          title: 'Êìç‰Ωú',\n          dataIndex: 'action',\n          scopedSlots: { customRender: 'action' }\n        }\n      ],\n      // Âä†ËΩΩÊï∞ÊçÆÊñπÊ≥ï ÂøÖÈ°ª‰∏∫ Promise ÂØπË±°\n      loadData: parameter => {\n        return queryData(Object.assign(parameter, this.queryParam), '/skills/getSkillsList3').then(res => {\n          console.log(res)\n          this.skills = res.result.data\n          return res.result\n        })\n      },\n      roleNames: [],\n      selectedRowKeys: [],\n      options: {\n        alert: false,\n        rowSelection: null\n      },\n      optionAlertShow: false,\n      treeData: [] //Ê†ëÁªìÊûÑ\n    }\n  },\n  created() {\n    this.handleSkillsTypeList()\n  },\n  methods: {\n    // Ëé∑ÂèñÂçï‰Ωç‰∏ãÁöÑÂçï‰Ωç\n    handleSkillsTypeList() {\n      const orgId = JSON.parse(localStorage.getItem('user')).orgId\n      var _this = this\n      queryData({ orgId: orgId }, '/skillsType/getSkillsTypeList').then(res => {\n        console.log(res)\n        _this.treeData = res.data\n        if (!res.code === 0) {\n          _this.$message.error(res.message)\n        }\n      })\n    },\n    // Â§ÑÁêÜÊñ∞Â¢û\n    handleAddSubmit() {\n      this.$refs.table.refresh(true)\n    },\n    // Ë°®ÂçïÈáçÁΩÆ\n    resetQuery() {\n      this.queryParam = {}\n      this.$refs.table.refresh(true)\n    },\n    // ÊòæÁ§∫Áä∂ÊÄÅ‰øÆÊîπ\n    handleAddVisible() {\n      this.addVisible = true\n    },\n    //‰øÆÊîπÈó≤ËÅä\n    handleEditVisible(record) {\n      this.editData = record\n      // this.$refs.editModal.add(record)\n      this.$refs.EditChat.add(record)\n    },\n    //‰∏ãÊãâÊ°Ü\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    // ÊêúÁ¥¢ÂÜÖÂÆπ\n    searchData() {\n      this.$refs.table.refresh(true)\n    },\n    // Âà†Èô§\n    deleteSkills(record) {\n      var _this = this\n      this.$confirm({\n        title: 'Ë≠¶Âëä',\n        content: `ÁúüÁöÑË¶ÅÂà†Èô§ ${record.title} Âêó?`,\n        okText: 'Âà†Èô§',\n        okType: 'danger',\n        cancelText: 'ÂèñÊ∂à',\n        onOk() {\n          console.log('OK')\n          // Âú®ËøôÈáåË∞ÉÁî®Âà†Èô§Êé•Âè£\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            var id = { entityIds: [record.id] }\n            queryData(id, '/skills/delete').then(res => {\n              console.log('Âà†Èô§Áî®Êà∑ËøîÂõûÂÄºÔºö', res)\n              if (res.code == 0) {\n                _this.$message.success('Âà†Èô§ÊàêÂäü')\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    // ÊâπÈáèÂà†Èô§\n    deleteSkillsIds() {\n      console.log(this.selectedRowKeys)\n      var _this = this\n      this.$confirm({\n        title: 'Ë≠¶Âëä',\n        content: `ÁúüÁöÑË¶ÅÂà†Èô§Âêó?`,\n        okText: 'Âà†Èô§',\n        okType: 'danger',\n        cancelText: 'ÂèñÊ∂à',\n        onOk() {\n          // Âú®ËøôÈáåË∞ÉÁî®Âà†Èô§Êé•Âè£\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            var entityIds = { entityIds: [_this.selectedRowKeys][0] }\n\n            queryData(entityIds, '/skillsOption/delete').then(res => {\n              if (res.code == 0) {\n                _this.$message.success('Âà†Èô§ÊàêÂäü')\n                _this.selectedRowKeys = []\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    //Ê∏ÖÁ©∫Âä®‰ΩúÈõÜ\n    delCmd(record) {\n      var _this = this\n      this.$confirm({\n        title: 'Ë≠¶Âëä',\n        content: ` <${record.title}> Â∞Ü‰∏çÂÜç‰ΩøÁî® <${record.cmdName}> Âä®‰ΩúÈõÜ`,\n        okText: 'Âà†Èô§',\n        okType: 'danger',\n        cancelText: 'ÂèñÊ∂à',\n        onOk() {\n          console.log('OK')\n          // Âú®ËøôÈáåË∞ÉÁî®Âà†Èô§Êé•Âè£\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            queryData({ entityId: record.skillsOptionId }, '/skillsOption/deleteCmd').then(res => {\n              console.log('Âà†Èô§Áî®Êà∑ËøîÂõûÂÄºÔºö', res)\n              if (res.code == 0) {\n                _this.$message.success('Âà†Èô§ÊàêÂäü')\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    tableOption() {\n      if (!this.optionAlertShow) {\n        this.options = {\n          alert: {\n            show: true,\n            clear: () => {\n              this.selectedRowKeys = []\n            }\n          },\n          rowSelection: {\n            selectedRowKeys: this.selectedRowKeys,\n            onChange: this.onSelectChange,\n            getCheckboxProps: record => ({\n              props: {\n                disabled: record.no === 'No 2',\n                name: record.no\n              }\n            })\n          }\n        }\n        this.optionAlertShow = true\n      } else {\n        this.options = {\n          alert: false,\n          rowSelection: null\n        }\n        this.optionAlertShow = false\n      }\n    },\n\n    onSelectChange(selectedRowKeys) {\n      this.selectedRowKeys = selectedRowKeys\n    },\n    deriveExcel() {\n      this.$message.success('Âà´ÁùÄÊÄ•Âø´Â•Ω‰∫Üüò≠')\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.search {\n  margin-bottom: 54px;\n}\n\n.fold {\n  width: calc(100% - 216px);\n  display: inline-block;\n}\n\n.operator {\n  margin-bottom: 18px;\n}\n\n@media screen and (max-width: 900px) {\n  .fold {\n    width: 100%;\n  }\n}\n</style>\n"]}]}