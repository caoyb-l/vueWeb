{"remainingRequest":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/robot/RobotList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/views/robot/RobotList.vue","mtime":1582112813771},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/thread-loader/dist/cjs.js","mtime":1571637441620},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js","mtime":1571637266900},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/vue-loader/lib/index.js","mtime":1571637450640}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { STable } from '@/components'\nimport { PageView } from '@/layouts'\nimport EditRobot from './modules/EditRobot'\nimport { queryData } from '@/api/common'\nimport ShowType from './modules/showSkillsType'\n\nexport default {\n  name: 'TableList',\n  components: {\n    STable,\n    PageView,\n    EditRobot,\n    ShowType\n  },\n  data() {\n    return {\n      // 高级搜索 展开/关闭\n      advanced: false,\n      addVisible: false,\n      editVisible: false,\n      orgId: {\n        orgId: 1\n      },\n      selectedItems: [],\n      // 查询参数\n      queryParam: {\n        code: '',\n        name: '',\n        orgId: '',\n        validityDate: ''\n      },\n      editData: {},\n      options: {\n        alert: false,\n        rowSelection: null\n      },\n      // 表头\n      columns: [\n        {\n          title: '#',\n          dataIndex: 'no',\n          scopedSlots: { customRender: 'serial' }\n        },\n        {\n          title: '名称',\n          dataIndex: 'name'\n        },\n        {\n          title: '编码',\n          dataIndex: 'code'\n        },\n        {\n          title: '单位名称',\n          dataIndex: 'orgName'\n        },\n        {\n          title: '地图名称',\n          dataIndex: 'mapName'\n        },\n        // {\n        //   title: '有效截止时间',\n        //   dataIndex: 'validityDate',\n        //   scopedSlots: { customRender: 'validityDate' }\n        // },\n        {\n          title: '人脸失效时间',\n          dataIndex: 'faceTime'\n        },\n        {\n          title: '操作',\n          dataIndex: 'action',\n          scopedSlots: { customRender: 'action' }\n        }\n      ],\n      // 加载数据方法 必须为 Promise 对象\n      loadData: parameter => {\n        let userId = JSON.parse(localStorage.getItem('user')).id\n        let orgId\n        if (this.queryParam.orgId > 0) {\n          orgId = this.queryParam.orgId\n        } else {\n          orgId = JSON.parse(localStorage.getItem('user')).orgId\n        }\n        return queryData(\n          Object.assign(parameter, this.queryParam, { userId: userId, orgId: orgId }),\n          '/robotInfo/list'\n        ).then(res => {\n          console.log(res)\n          return res.result\n        })\n      },\n      orgNames: [],\n      roleNames: [],\n      selectedRowKeys: []\n    }\n  },\n  created() {\n    this.handleOrgLists()\n  },\n  computed: {\n    title() {\n      return this.$route.meta.title\n    }\n  },\n  methods: {\n    // 获取该用户下的所属单位\n    handleOrgLists() {\n      var _this = this\n      var orgId = JSON.parse(localStorage.getItem('user')).orgId\n      var param = { org: orgId }\n      queryData(param, '/userManage/getHrOrgByPid')\n        .then(res => {\n          _this.orgNames = res.result\n          if (res.code !== 0) {\n            _this.$message.error(res.message)\n          }\n        })\n        .catch(err => console.log(err))\n    },\n    onChange(date, dateString) {\n      this.queryParam.validityDate = dateString\n      console.log(date, dateString)\n    },\n    onSelectChange(selectedRowKeys) {\n      this.selectedRowKeys = selectedRowKeys\n    },\n    // 表单重置\n    resetQuery() {\n      this.queryParam = {}\n      this.$refs.table.refresh(true)\n    },\n    // 显示状态修改\n    handleAddVisible() {\n      this.addVisible = true\n    },\n    // 查看问答库\n    selectSkillsType(record) {\n      this.$refs.showSkillsType.add(record)\n    },\n    handleEditVisible(record) {\n      // this.editData = record;\n      this.$refs.editModal.add(record)\n      this.editVisible = true\n    },\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    // 搜索内容\n    searchData() {\n      this.$refs.table.refresh(true)\n    },\n    handleOk() {\n      this.$refs.table.refresh(true)\n    },\n    // 初始化机器人\n    handleRecovery(record) {\n      var _this = this\n      this.$confirm({\n        title: '警告',\n        content: `机器人 <${record.name}>将删除后台所有配置，但是会保留私有库。是否确定？`,\n        okText: '确定',\n        okType: 'danger',\n        cancelText: '取消',\n        onOk() {\n          console.log('OK')\n          // 在这里调用删除接口\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            var id = { code: record.code }\n            queryData(id, '/robotInfo/recoveryRobot').then(res => {\n              console.log('机器人初始化返回值：', res)\n              if (res.code == 0) {\n                _this.$message.success('初始化成功')\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    // 删除机器人\n    handleDelete(record) {\n      var _this = this\n      this.$confirm({\n        title: '警告',\n        content: `机器人 <${record.name}>信息将被移除，并且信息无法找回，是否确定？`,\n        okText: '确定',\n        okType: 'danger',\n        cancelText: '取消',\n        onOk() {\n          console.log('OK')\n          // 在这里调用删除接口\n          return new Promise((resolve, reject) => {\n            setTimeout(Math.random() > 0.5 ? resolve : reject, 500)\n            var id = { code: record.code }\n            queryData(id, '/robotInfo/delete').then(res => {\n              console.log('移除机器人：', res)\n              if (res.code == 0) {\n                _this.$message.success('移除成功')\n                _this.$refs.table.refresh(true)\n              } else {\n                _this.$message.error(res.message)\n              }\n            })\n          }).catch(() => console.log('Oops errors!'))\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    }\n  }\n}\n",null]}