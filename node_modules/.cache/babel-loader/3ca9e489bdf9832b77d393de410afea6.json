{"remainingRequest":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/thread-loader/dist/cjs.js!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/eslint-loader/index.js??ref--13-0!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/components/TagSelect/index.jsx","dependencies":[{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/components/TagSelect/index.jsx","mtime":1571637124757},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/thread-loader/dist/cjs.js","mtime":1571637441620},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js","mtime":1571637266900},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/eslint-loader/index.js","mtime":1571637323383}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport PropTypes from 'ant-design-vue/es/_util/vue-types';\nimport Option from \"./TagSelectOption.jsx\";\nimport { filterEmpty } from '@/components/_util/util';\nexport default {\n  Option: Option,\n  name: 'TagSelect',\n  model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-tag-select'\n    },\n    defaultValue: {\n      type: PropTypes.array,\n      default: null\n    },\n    value: {\n      type: PropTypes.array,\n      default: null\n    },\n    expandable: {\n      type: Boolean,\n      default: false\n    },\n    hideCheckAll: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      expand: false,\n      localCheckAll: false,\n      items: this.getItemsKey(filterEmpty(this.$slots.default)),\n      val: this.value || this.defaultValue || []\n    };\n  },\n  methods: {\n    onChange: function onChange(checked) {\n      var key = Object.keys(this.items).filter(function (key) {\n        return key === checked.value;\n      });\n      this.items[key] = checked.checked;\n      var bool = Object.values(this.items).lastIndexOf(false);\n\n      if (bool === -1) {\n        this.localCheckAll = true;\n      } else {\n        this.localCheckAll = false;\n      }\n    },\n    onCheckAll: function onCheckAll(checked) {\n      var _this = this;\n\n      Object.keys(this.items).forEach(function (v) {\n        _this.items[v] = checked.checked;\n      });\n      this.localCheckAll = checked.checked;\n    },\n    getItemsKey: function getItemsKey(items) {\n      var totalItem = {};\n      items.forEach(function (item) {\n        totalItem[item.componentOptions.propsData && item.componentOptions.propsData.value] = false;\n      });\n      return totalItem;\n    },\n    // CheckAll Button\n    renderCheckAll: function renderCheckAll() {\n      var h = this.$createElement;\n      return !this.hideCheckAll && h(Option, {\n        \"key\": 'total',\n        \"attrs\": {\n          \"checked\": this.localCheckAll\n        },\n        \"on\": {\n          \"change\": this.onCheckAll\n        }\n      }, [\"All\"]) || null;\n    },\n    // expandable\n    renderExpandable: function renderExpandable() {},\n    // render option\n    renderTags: function renderTags(items) {\n      var _this2 = this;\n\n      var listeners = {\n        change: function change(checked) {\n          _this2.onChange(checked);\n\n          _this2.$emit('change', checked);\n        }\n      };\n      return items.map(function (vnode) {\n        var options = vnode.componentOptions;\n        options.listeners = listeners;\n        return vnode;\n      });\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var prefixCls = this.$props.prefixCls;\n\n    var classString = _defineProperty({}, \"\".concat(prefixCls), true);\n\n    var tagItems = filterEmpty(this.$slots.default);\n    return h(\"div\", {\n      \"class\": classString\n    }, [this.renderCheckAll(), this.renderTags(tagItems)]);\n  }\n};",null]}