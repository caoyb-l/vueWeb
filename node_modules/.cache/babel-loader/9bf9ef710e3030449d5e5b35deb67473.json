{"remainingRequest":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/eslint-loader/index.js??ref--13-0!/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/components/_util/util.js","dependencies":[{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/components/_util/util.js","mtime":1571637124803},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/cache-loader/dist/cjs.js","mtime":1571637271763},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n\n/**\r\n * components util\r\n */\n\n/**\r\n * 清理空值，对象\r\n * @param children\r\n * @returns {*[]}\r\n */\nexport function filterEmpty() {\n  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return children.filter(function (c) {\n    return c.tag || c.text && c.text.trim() !== '';\n  });\n}\n/**\r\n * 获取字符串长度，英文字符 长度1，中文字符长度2\r\n * @param {*} str\r\n */\n\nexport var getStrFullLength = function getStrFullLength() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return str.split('').reduce(function (pre, cur) {\n    var charCode = cur.charCodeAt(0);\n\n    if (charCode >= 0 && charCode <= 128) {\n      return pre + 1;\n    }\n\n    return pre + 2;\n  }, 0);\n};\n/**\r\n * 截取字符串，根据 maxLength 截取后返回\r\n * @param {*} str\r\n * @param {*} maxLength\r\n */\n\nexport var cutStrByFullLength = function cutStrByFullLength() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var maxLength = arguments.length > 1 ? arguments[1] : undefined;\n  var showLength = 0;\n  return str.split('').reduce(function (pre, cur) {\n    var charCode = cur.charCodeAt(0);\n\n    if (charCode >= 0 && charCode <= 128) {\n      showLength += 1;\n    } else {\n      showLength += 2;\n    }\n\n    if (showLength <= maxLength) {\n      return pre + cur;\n    }\n\n    return pre;\n  }, '');\n};",{"version":3,"sources":["/Users/cyb/work/KaiFa/cz_workSpace/robotWeb/src/components/_util/util.js"],"names":["filterEmpty","children","filter","c","tag","text","trim","getStrFullLength","str","split","reduce","pre","cur","charCode","charCodeAt","cutStrByFullLength","maxLength","showLength"],"mappings":";;AAAA;;;;AAIA;;;;;AAKA,OAAO,SAASA,WAAT,GAAqC;AAAA,MAAfC,QAAe,uEAAJ,EAAI;AAC1C,SAAOA,QAAQ,CAACC,MAAT,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,GAAF,IAAUD,CAAC,CAACE,IAAF,IAAUF,CAAC,CAACE,IAAF,CAAOC,IAAP,OAAkB,EAA1C;AAAA,GAAjB,CAAP;AACD;AAED;;;;;AAIA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SAC9BA,GAAG,CAACC,KAAJ,CAAU,EAAV,EAAcC,MAAd,CAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,QAAMC,QAAQ,GAAGD,GAAG,CAACE,UAAJ,CAAe,CAAf,CAAjB;;AACA,QAAID,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,GAAjC,EAAsC;AACpC,aAAOF,GAAG,GAAG,CAAb;AACD;;AACD,WAAOA,GAAG,GAAG,CAAb;AACD,GAND,EAMG,CANH,CAD8B;AAAA,CAAzB;AASP;;;;;;AAKA,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,GAAyB;AAAA,MAAxBP,GAAwB,uEAAlB,EAAkB;AAAA,MAAdQ,SAAc;AACzD,MAAIC,UAAU,GAAG,CAAjB;AACA,SAAOT,GAAG,CAACC,KAAJ,CAAU,EAAV,EAAcC,MAAd,CAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxC,QAAMC,QAAQ,GAAGD,GAAG,CAACE,UAAJ,CAAe,CAAf,CAAjB;;AACA,QAAID,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,GAAjC,EAAsC;AACpCI,MAAAA,UAAU,IAAI,CAAd;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU,IAAI,CAAd;AACD;;AACD,QAAIA,UAAU,IAAID,SAAlB,EAA6B;AAC3B,aAAOL,GAAG,GAAGC,GAAb;AACD;;AACD,WAAOD,GAAP;AACD,GAXM,EAWJ,EAXI,CAAP;AAYD,CAdM","sourcesContent":["/**\r\n * components util\r\n */\r\n\r\n/**\r\n * 清理空值，对象\r\n * @param children\r\n * @returns {*[]}\r\n */\r\nexport function filterEmpty (children = []) {\r\n  return children.filter(c => c.tag || (c.text && c.text.trim() !== ''))\r\n}\r\n\r\n/**\r\n * 获取字符串长度，英文字符 长度1，中文字符长度2\r\n * @param {*} str\r\n */\r\nexport const getStrFullLength = (str = '') =>\r\n  str.split('').reduce((pre, cur) => {\r\n    const charCode = cur.charCodeAt(0)\r\n    if (charCode >= 0 && charCode <= 128) {\r\n      return pre + 1\r\n    }\r\n    return pre + 2\r\n  }, 0)\r\n\r\n/**\r\n * 截取字符串，根据 maxLength 截取后返回\r\n * @param {*} str\r\n * @param {*} maxLength\r\n */\r\nexport const cutStrByFullLength = (str = '', maxLength) => {\r\n  let showLength = 0\r\n  return str.split('').reduce((pre, cur) => {\r\n    const charCode = cur.charCodeAt(0)\r\n    if (charCode >= 0 && charCode <= 128) {\r\n      showLength += 1\r\n    } else {\r\n      showLength += 2\r\n    }\r\n    if (showLength <= maxLength) {\r\n      return pre + cur\r\n    }\r\n    return pre\r\n  }, '')\r\n}\r\n"]}]}