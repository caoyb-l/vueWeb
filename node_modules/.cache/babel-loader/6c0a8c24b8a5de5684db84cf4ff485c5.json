{"remainingRequest":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\thread-loader\\dist\\cjs.js!E:\\XiangMu\\ant-design-pro-vue\\node_modules\\babel-loader\\lib\\index.js!E:\\XiangMu\\ant-design-pro-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\XiangMu\\ant-design-pro-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\XiangMu\\ant-design-pro-vue\\src\\components\\Ellipsis\\Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\XiangMu\\ant-design-pro-vue\\src\\components\\Ellipsis\\Ellipsis.vue","mtime":1562294713032},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XiangMu\\ant-design-pro-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport Tooltip from 'ant-design-vue/es/tooltip';\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util';\n/*\r\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\r\n\r\n    const TooltipOverlayStyle = {\r\n      overflowWrap: 'break-word',\r\n      wordWrap: 'break-word',\r\n    };\r\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip: Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom: function getStrDom(str, fullLength) {\n      var h = this.$createElement;\n      return h(\"span\", [cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '')]);\n    },\n    getTooltip: function getTooltip(fullStr, fullLength) {\n      var h = this.$createElement;\n      return h(Tooltip, [h(\"template\", {\n        \"slot\": \"title\"\n      }, [fullStr]), this.getStrDom(fullStr, fullLength)]);\n    }\n  },\n  render: function render() {\n    var _this$$props = this.$props,\n        tooltip = _this$$props.tooltip,\n        length = _this$$props.length;\n    var str = this.$slots.default.map(function (vNode) {\n      return vNode.text;\n    }).join('');\n    var fullLength = getStrFullLength(str);\n    var strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength);\n    return strDom;\n  }\n};",null]}